/* Copyright 2012 John Oliver

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package com.insightfullogic.oss.bytecode

//wrap becls Instruction to make case matching easier
sealed trait Instruction {
  def code: Int
  def inst: org.apache.bcel.generic.Instruction

  override def toString = inst.toString();

}

object InstructionConverter {
  def convert(i: org.apache.bcel.generic.Instruction): Instruction =
    i.getOpcode() match {
      case 0 => NOP(i)
      case 1 => ACONST_NULL(i)
      case 2 => ICONST_M1(i)
      case 3 => ICONST_0(i)
      case 4 => ICONST_1(i)
      case 5 => ICONST_2(i)
      case 6 => ICONST_3(i)
      case 7 => ICONST_4(i)
      case 8 => ICONST_5(i)
      case 9 => LCONST_0(i)
      case 10 => LCONST_1(i)
      case 11 => FCONST_0(i)
      case 12 => FCONST_1(i)
      case 13 => FCONST_2(i)
      case 14 => DCONST_0(i)
      case 15 => DCONST_1(i)
      case 16 => BIPUSH(i)
      case 17 => SIPUSH(i)
      case 18 => LDC(i)
      case 19 => LDC_W(i)
      case 20 => LDC2_W(i)
      case 21 => ILOAD(i)
      case 22 => LLOAD(i)
      case 23 => FLOAD(i)
      case 24 => DLOAD(i)
      case 25 => ALOAD(i)
      case 26 => ILOAD_0(i)
      case 27 => ILOAD_1(i)
      case 28 => ILOAD_2(i)
      case 29 => ILOAD_3(i)
      case 30 => LLOAD_0(i)
      case 31 => LLOAD_1(i)
      case 32 => LLOAD_2(i)
      case 33 => LLOAD_3(i)
      case 34 => FLOAD_0(i)
      case 35 => FLOAD_1(i)
      case 36 => FLOAD_2(i)
      case 37 => FLOAD_3(i)
      case 38 => DLOAD_0(i)
      case 39 => DLOAD_1(i)
      case 40 => DLOAD_2(i)
      case 41 => DLOAD_3(i)
      case 42 => ALOAD_0(i)
      case 43 => ALOAD_1(i)
      case 44 => ALOAD_2(i)
      case 45 => ALOAD_3(i)
      case 46 => IALOAD(i)
      case 47 => LALOAD(i)
      case 48 => FALOAD(i)
      case 49 => DALOAD(i)
      case 50 => AALOAD(i)
      case 51 => BALOAD(i)
      case 52 => CALOAD(i)
      case 53 => SALOAD(i)
      case 54 => ISTORE(i)
      case 55 => LSTORE(i)
      case 56 => FSTORE(i)
      case 57 => DSTORE(i)
      case 58 => ASTORE(i)
      case 59 => ISTORE_0(i)
      case 60 => ISTORE_1(i)
      case 61 => ISTORE_2(i)
      case 62 => ISTORE_3(i)
      case 63 => LSTORE_0(i)
      case 64 => LSTORE_1(i)
      case 65 => LSTORE_2(i)
      case 66 => LSTORE_3(i)
      case 67 => FSTORE_0(i)
      case 68 => FSTORE_1(i)
      case 69 => FSTORE_2(i)
      case 70 => FSTORE_3(i)
      case 71 => DSTORE_0(i)
      case 72 => DSTORE_1(i)
      case 73 => DSTORE_2(i)
      case 74 => DSTORE_3(i)
      case 75 => ASTORE_0(i)
      case 76 => ASTORE_1(i)
      case 77 => ASTORE_2(i)
      case 78 => ASTORE_3(i)
      case 79 => IASTORE(i)
      case 80 => LASTORE(i)
      case 81 => FASTORE(i)
      case 82 => DASTORE(i)
      case 83 => AASTORE(i)
      case 84 => BASTORE(i)
      case 85 => CASTORE(i)
      case 86 => SASTORE(i)
      case 87 => POP(i)
      case 88 => POP2(i)
      case 89 => DUP(i)
      case 90 => DUP_X1(i)
      case 91 => DUP_X2(i)
      case 92 => DUP2(i)
      case 93 => DUP2_X1(i)
      case 94 => DUP2_X2(i)
      case 95 => SWAP(i)
      case 96 => IADD(i)
      case 97 => LADD(i)
      case 98 => FADD(i)
      case 99 => DADD(i)
      case 100 => ISUB(i)
      case 101 => LSUB(i)
      case 102 => FSUB(i)
      case 103 => DSUB(i)
      case 104 => IMUL(i)
      case 105 => LMUL(i)
      case 106 => FMUL(i)
      case 107 => DMUL(i)
      case 108 => IDIV(i)
      case 109 => LDIV(i)
      case 110 => FDIV(i)
      case 111 => DDIV(i)
      case 112 => IREM(i)
      case 113 => LREM(i)
      case 114 => FREM(i)
      case 115 => DREM(i)
      case 116 => INEG(i)
      case 117 => LNEG(i)
      case 118 => FNEG(i)
      case 119 => DNEG(i)
      case 120 => ISHL(i)
      case 121 => LSHL(i)
      case 122 => ISHR(i)
      case 123 => LSHR(i)
      case 124 => IUSHR(i)
      case 125 => LUSHR(i)
      case 126 => IAND(i)
      case 127 => LAND(i)
      case 128 => IOR(i)
      case 129 => LOR(i)
      case 130 => IXOR(i)
      case 131 => LXOR(i)
      case 132 => IINC(i)
      case 133 => I2L(i)
      case 134 => I2F(i)
      case 135 => I2D(i)
      case 136 => L2I(i)
      case 137 => L2F(i)
      case 138 => L2D(i)
      case 139 => F2I(i)
      case 140 => F2L(i)
      case 141 => F2D(i)
      case 142 => D2I(i)
      case 143 => D2L(i)
      case 144 => D2F(i)
      case 145 => I2B(i)
      case 146 => I2C(i)
      case 147 => I2S(i)
      case 148 => LCMP(i)
      case 149 => FCMPL(i)
      case 150 => FCMPG(i)
      case 151 => DCMPL(i)
      case 152 => DCMPG(i)
      case 153 => IFEQ(i)
      case 154 => IFNE(i)
      case 155 => IFLT(i)
      case 156 => IFGE(i)
      case 157 => IFGT(i)
      case 158 => IFLE(i)
      case 159 => IF_ICMPEQ(i)
      case 160 => IF_ICMPNE(i)
      case 161 => IF_ICMPLT(i)
      case 162 => IF_ICMPGE(i)
      case 163 => IF_ICMPGT(i)
      case 164 => IF_ICMPLE(i)
      case 165 => IF_ACMPEQ(i)
      case 166 => IF_ACMPNE(i)
      case 167 => GOTO(i)
      case 168 => JSR(i)
      case 169 => RET(i)
      case 170 => TABLESWITCH(i)
      case 171 => LOOKUPSWITCH(i)
      case 172 => IRETURN(i)
      case 173 => LRETURN(i)
      case 174 => FRETURN(i)
      case 175 => DRETURN(i)
      case 176 => ARETURN(i)
      case 177 => RETURN(i)
      case 178 => GETSTATIC(i)
      case 179 => PUTSTATIC(i)
      case 180 => GETFIELD(i)
      case 181 => PUTFIELD(i)
      case 182 => INVOKEVIRTUAL(i)
      case 183 => INVOKESPECIAL(i)
      case 184 => INVOKESTATIC(i)
      case 185 => INVOKEINTERFACE(i)
      case 187 => NEW(i)
      case 188 => NEWARRAY(i)
      case 189 => ANEWARRAY(i)
      case 190 => ARRAYLENGTH(i)
      case 191 => ATHROW(i)
      case 192 => CHECKCAST(i)
      case 193 => INSTANCEOF(i)
      case 194 => MONITORENTER(i)
      case 195 => MONITOREXIT(i)
      case 196 => WIDE(i)
      case 197 => MULTIANEWARRAY(i)
      case 198 => IFNULL(i)
      case 199 => IFNONNULL(i)
      case 200 => GOTO_W(i)
      case 201 => JSR_W(i)
      case _ => UNKNOWN_InstructionOld(i.getOpcode(), i)
    }
}

case class NOP(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 0 }
case class ACONST_NULL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 1 }
case class ICONST_M1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 2 }
case class ICONST_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 3 }
case class ICONST_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 4 }
case class ICONST_2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 5 }
case class ICONST_3(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 6 }
case class ICONST_4(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 7 }
case class ICONST_5(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 8 }
case class LCONST_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 9 }
case class LCONST_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 10 }
case class FCONST_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 11 }
case class FCONST_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 12 }
case class FCONST_2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 13 }
case class DCONST_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 14 }
case class DCONST_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 15 }
case class BIPUSH(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 16 }
case class SIPUSH(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 17 }
case class LDC(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 18 }
case class LDC_W(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 19 }
case class LDC2_W(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 20 }
case class ILOAD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 21 }
case class LLOAD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 22 }
case class FLOAD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 23 }
case class DLOAD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 24 }
case class ALOAD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 25 }
case class ILOAD_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 26 }
case class ILOAD_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 27 }
case class ILOAD_2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 28 }
case class ILOAD_3(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 29 }
case class LLOAD_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 30 }
case class LLOAD_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 31 }
case class LLOAD_2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 32 }
case class LLOAD_3(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 33 }
case class FLOAD_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 34 }
case class FLOAD_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 35 }
case class FLOAD_2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 36 }
case class FLOAD_3(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 37 }
case class DLOAD_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 38 }
case class DLOAD_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 39 }
case class DLOAD_2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 40 }
case class DLOAD_3(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 41 }
case class ALOAD_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 42 }
case class ALOAD_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 43 }
case class ALOAD_2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 44 }
case class ALOAD_3(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 45 }
case class IALOAD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 46 }
case class LALOAD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 47 }
case class FALOAD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 48 }
case class DALOAD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 49 }
case class AALOAD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 50 }
case class BALOAD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 51 }
case class CALOAD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 52 }
case class SALOAD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 53 }
case class ISTORE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 54 }
case class LSTORE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 55 }
case class FSTORE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 56 }
case class DSTORE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 57 }
case class ASTORE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 58 }
case class ISTORE_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 59 }
case class ISTORE_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 60 }
case class ISTORE_2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 61 }
case class ISTORE_3(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 62 }
case class LSTORE_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 63 }
case class LSTORE_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 64 }
case class LSTORE_2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 65 }
case class LSTORE_3(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 66 }
case class FSTORE_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 67 }
case class FSTORE_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 68 }
case class FSTORE_2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 69 }
case class FSTORE_3(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 70 }
case class DSTORE_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 71 }
case class DSTORE_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 72 }
case class DSTORE_2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 73 }
case class DSTORE_3(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 74 }
case class ASTORE_0(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 75 }
case class ASTORE_1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 76 }
case class ASTORE_2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 77 }
case class ASTORE_3(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 78 }
case class IASTORE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 79 }
case class LASTORE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 80 }
case class FASTORE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 81 }
case class DASTORE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 82 }
case class AASTORE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 83 }
case class BASTORE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 84 }
case class CASTORE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 85 }
case class SASTORE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 86 }
case class POP(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 87 }
case class POP2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 88 }
case class DUP(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 89 }
case class DUP_X1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 90 }
case class DUP_X2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 91 }
case class DUP2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 92 }
case class DUP2_X1(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 93 }
case class DUP2_X2(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 94 }
case class SWAP(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 95 }
case class IADD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 96 }
case class LADD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 97 }
case class FADD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 98 }
case class DADD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 99 }
case class ISUB(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 100 }
case class LSUB(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 101 }
case class FSUB(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 102 }
case class DSUB(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 103 }
case class IMUL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 104 }
case class LMUL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 105 }
case class FMUL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 106 }
case class DMUL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 107 }
case class IDIV(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 108 }
case class LDIV(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 109 }
case class FDIV(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 110 }
case class DDIV(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 111 }
case class IREM(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 112 }
case class LREM(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 113 }
case class FREM(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 114 }
case class DREM(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 115 }
case class INEG(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 116 }
case class LNEG(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 117 }
case class FNEG(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 118 }
case class DNEG(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 119 }
case class ISHL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 120 }
case class LSHL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 121 }
case class ISHR(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 122 }
case class LSHR(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 123 }
case class IUSHR(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 124 }
case class LUSHR(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 125 }
case class IAND(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 126 }
case class LAND(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 127 }
case class IOR(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 128 }
case class LOR(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 129 }
case class IXOR(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 130 }
case class LXOR(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 131 }
case class IINC(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 132 }
case class I2L(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 133 }
case class I2F(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 134 }
case class I2D(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 135 }
case class L2I(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 136 }
case class L2F(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 137 }
case class L2D(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 138 }
case class F2I(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 139 }
case class F2L(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 140 }
case class F2D(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 141 }
case class D2I(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 142 }
case class D2L(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 143 }
case class D2F(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 144 }
case class I2B(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 145 }
case class INT2BYTE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 145 } // Old notion
case class I2C(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 146 }
case class INT2CHAR(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 146 } // Old notion
case class I2S(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 147 }
case class INT2SHORT(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 147 } // Old notion
case class LCMP(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 148 }
case class FCMPL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 149 }
case class FCMPG(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 150 }
case class DCMPL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 151 }
case class DCMPG(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 152 }
case class IFEQ(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 153 }
case class IFNE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 154 }
case class IFLT(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 155 }
case class IFGE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 156 }
case class IFGT(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 157 }
case class IFLE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 158 }
case class IF_ICMPEQ(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 159 }
case class IF_ICMPNE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 160 }
case class IF_ICMPLT(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 161 }
case class IF_ICMPGE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 162 }
case class IF_ICMPGT(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 163 }
case class IF_ICMPLE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 164 }
case class IF_ACMPEQ(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 165 }
case class IF_ACMPNE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 166 }
case class GOTO(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 167 }
case class JSR(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 168 }
case class RET(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 169 }
case class TABLESWITCH(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 170 }
case class LOOKUPSWITCH(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 171 }
case class IRETURN(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 172 }
case class LRETURN(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 173 }
case class FRETURN(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 174 }
case class DRETURN(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 175 }
case class ARETURN(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 176 }
case class RETURN(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 177 }
case class GETSTATIC(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 178 }
case class PUTSTATIC(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 179 }
case class GETFIELD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 180 }
case class PUTFIELD(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 181 }
case class INVOKEVIRTUAL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 182 }
case class INVOKESPECIAL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 183 }
case class INVOKENONVIRTUAL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 183 } // Old name in JDK 1.0
case class INVOKESTATIC(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 184 }
case class INVOKEINTERFACE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 185 }
case class NEW(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 187 }
case class NEWARRAY(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 188 }
case class ANEWARRAY(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 189 }
case class ARRAYLENGTH(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 190 }
case class ATHROW(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 191 }
case class CHECKCAST(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 192 }
case class INSTANCEOF(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 193 }
case class MONITORENTER(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 194 }
case class MONITOREXIT(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 195 }
case class WIDE(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 196 }
case class MULTIANEWARRAY(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 197 }
case class IFNULL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 198 }
case class IFNONNULL(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 199 }
case class GOTO_W(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 200 }
case class JSR_W(inst: org.apache.bcel.generic.Instruction) extends Instruction { val code = 201 }

case class UNKNOWN_InstructionOld(code: Int, inst: org.apache.bcel.generic.Instruction) extends Instruction;
  
